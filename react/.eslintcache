[{"/home/ubuntu/environment/tutorial-react-twitter-api-login/react/src/index.js":"1","/home/ubuntu/environment/tutorial-react-twitter-api-login/react/src/App.js":"2","/home/ubuntu/environment/tutorial-react-twitter-api-login/react/src/reportWebVitals.js":"3"},{"size":500,"mtime":1611712699903,"results":"4","hashOfConfig":"5"},{"size":3101,"mtime":1612157064457,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1611712699903,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"o4cdx8",{"filePath":"11","messages":"12","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/home/ubuntu/environment/tutorial-react-twitter-api-login/react/src/index.js",[],["17","18"],"/home/ubuntu/environment/tutorial-react-twitter-api-login/react/src/App.js",["19","20","21"],"import logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport queryString from 'query-string';\n\nconst backendUrl = process.env.REACT_APP_BACKEND_URL;\n\nfunction App() {\n  \n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [name, setName] = useState();\n  const [imageUrl, setImageUrl] = useState();\n  const [status, setStatus] = useState();\n  const [url, setUrl] = useState();\n  \n  const login = () => {\n    (async () => {\n      \n      try {\n        //OAuth Step 1\n        const response = await axios({\n          url: `${backendUrl}/twitter/oauth/request_token`, \n          method: 'POST',\n          withCredentials: true\n        });\n        \n        const { oauth_token } = response.data;\n        //Oauth Step 2\n        window.location.href = `https://api.twitter.com/oauth/authenticate?oauth_token=${oauth_token}`;\n      } catch (error) {\n        console.error(error); \n      }\n      \n    })();\n  }\n  \n  const logout = () => {\n    (async () => {\n      try {\n        await axios({\n          url: `${backendUrl}/twitter/logout`, \n          method: 'POST',\n          withCredentials: true\n        });\n        setIsLoggedIn(false);\n      } catch (error) {\n        console.error(error); \n      }\n    })();\n  }\n  \n  useEffect(() => {\n    (async() => {\n      \n        const {oauth_token, oauth_verifier} = queryString.parse(window.location.search);  \n        \n        if (oauth_token && oauth_verifier) {\n         try {\n            //Oauth Step 3\n            await axios({\n              url: `${backendUrl}/twitter/oauth/access_token`,  \n              method: 'POST',\n              data: {oauth_token, oauth_verifier}, \n              withCredentials: true\n            });\n         } catch (error) {\n          console.error(error); \n         }\n        }\n        \n        try {\n          //Authenticated Resource Access\n          const {data: {name, profile_image_url_https, status, entities}} = await axios({\n            url: `${backendUrl}/twitter/users/profile_banner`,\n            method: 'GET',\n            withCredentials: true\n          });\n          \n          setIsLoggedIn(true);\n          setName(name);\n          setImageUrl(profile_image_url_https);\n          setStatus(status.text);\n          setUrl(entities.url.urls[0].expanded_url);\n         } catch (error) {\n          console.error(error); \n         }\n        \n      \n    })();\n  }, []);\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        {!isLoggedIn &&\n          <a className='signin-btn' onClick={login}>\n            <img src='https://assets.klaudsol.com/twitter.png' />\n          </a>\n        }\n        \n        { isLoggedIn &&\n          <div>\n            <div><img src={imageUrl}/></div> \n            <div>Name: {name}</div>\n            <div>URL: {url}</div>\n            <div>Status: {status}</div>\n            <button className='signout-btn' onClick={logout}>Sign Out</button>\n          </div>\n        }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/home/ubuntu/environment/tutorial-react-twitter-api-login/react/src/reportWebVitals.js",[],["22","23"],{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":98,"column":11,"nodeType":"30","endLine":98,"endColumn":53},{"ruleId":"31","severity":1,"message":"32","line":99,"column":13,"nodeType":"30","endLine":99,"endColumn":66},{"ruleId":"31","severity":1,"message":"32","line":105,"column":18,"nodeType":"30","endLine":105,"endColumn":39},{"ruleId":"24","replacedBy":"33"},{"ruleId":"26","replacedBy":"34"},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["35"],["36"],"no-global-assign","no-unsafe-negation"]